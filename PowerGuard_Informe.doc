PowerGuard - Informe de Paradigmas de Programación

Autor: Carlos Manuel Hernández
Repositorio: https://github.com/cmhh22/PowerGuard

Resumen
=======
PowerGuard es una aplicación de consola desarrollada en Python para la gestión de apagones eléctricos. Permite registrar, editar, resolver, eliminar y consultar eventos de apagón, facilitando el control y seguimiento de incidencias eléctricas en diferentes zonas. El objetivo principal del proyecto es demostrar la integración y aplicación de los paradigmas imperativo, funcional y asincrónico en un caso práctico y realista.

Paradigma Imperativo
--------------------
El paradigma imperativo es el eje central de PowerGuard. En este enfoque, el programador indica paso a paso cómo debe ejecutarse cada acción, controlando el flujo del programa mediante instrucciones secuenciales, condicionales y bucles. En PowerGuard, esto se refleja en la estructura del menú principal, donde el usuario selecciona opciones y el programa responde ejecutando bloques de código específicos para cada caso. Por ejemplo, al registrar un apagón, el programa solicita datos, valida la entrada y actualiza la lista de apagones siguiendo una secuencia lógica y controlada. El uso de variables de estado, ciclos `while` y condicionales `if-elif-else` permite gestionar la interacción y la lógica de negocio de manera clara y directa. Este paradigma facilita la comprensión del flujo general y la depuración del código, ya que cada instrucción tiene un efecto inmediato y visible sobre el estado del programa.

Ejemplo de código imperativo:

while True:
    imprimir_menu()
    opcion = input("Seleccione una opción: ")
    if opcion == '1':
        # Registro de apagón
    elif opcion == '2':
        # Marcar apagón como resuelto
    # ...

Paradigma Funcional
-------------------
El paradigma funcional se basa en el uso de funciones puras, que no modifican el estado global y siempre producen el mismo resultado para los mismos argumentos. En PowerGuard, este enfoque se utiliza para procesar y transformar datos de manera predecible y segura. Por ejemplo, la función `filter_pending` recibe una lista de apagones y devuelve una nueva lista con solo los apagones no resueltos, sin alterar la lista original. Las comprensiones de listas y funciones como `format_outages` y `format_csv` permiten transformar colecciones de objetos en representaciones de texto o CSV, separando la lógica de presentación de la lógica de negocio. Este paradigma promueve la reutilización de código, facilita las pruebas unitarias y reduce la probabilidad de errores relacionados con efectos secundarios o dependencias ocultas.

Ejemplo de función funcional:

def filter_pending(outages):
    return [o for o in outages if not o.resolved]

Estas funciones pueden ser combinadas y reutilizadas en diferentes partes del programa, mejorando la modularidad y la claridad del código.

Paradigma Asincrónico 
---------------------
El paradigma asincrónico permite que el programa realice operaciones de entrada/salida (como leer o escribir archivos) sin bloquear la ejecución del resto del código. En PowerGuard, esto se logra mediante el uso de `async` y `await`, junto con la librería `asyncio`. Por ejemplo, al cargar o guardar los datos de apagones en archivos JSON, el programa delega estas tareas a hilos secundarios usando `asyncio.to_thread`, permitiendo que la interfaz de usuario siga respondiendo mientras se completan las operaciones. Esto es especialmente útil en aplicaciones que pueden manejar grandes volúmenes de datos o que requieren mantener la fluidez de la experiencia del usuario. El paradigma asincrónico mejora la eficiencia, reduce los tiempos de espera y prepara la aplicación para posibles ampliaciones donde se requiera concurrencia o acceso a recursos externos (como bases de datos o servicios web).

Ejemplo de función asíncrona:

async def load_outages():
    text = await asyncio.to_thread(OUTAGES_FILE.read_text)
    # Procesamiento de datos

Esta aproximación permite que PowerGuard sea escalable y eficiente, incluso en escenarios donde múltiples usuarios o procesos acceden a los datos simultáneamente.

Estructura del Proyecto
-----------------------
El proyecto está organizado en módulos para separar responsabilidades:
- `cli.py`: Interfaz principal y lógica de interacción con el usuario.
- `services.py`: Funciones para cargar, guardar y notificar sobre apagones.
- `models.py`: Definición de las clases de datos (Outage, User).
- `utils.py`: Funciones utilitarias para filtrado y formateo de datos.
- Carpeta `data`: Archivos JSON persistentes.
- Carpeta `release`: Ejecutable generado para distribución.

Ventajas de la Integración de Paradigmas
----------------------------------------
- Imperativo: Facilita el control del flujo y la interacción directa con el usuario.
- Funcional: Permite un procesamiento de datos más seguro y predecible.
- Asincrónico: Mejora la eficiencia y la experiencia de usuario en operaciones de entrada/salida.

Conclusión
----------
PowerGuard es un ejemplo práctico de cómo combinar paradigmas de programación para crear una aplicación robusta, eficiente y mantenible. La integración de estos enfoques permite aprovechar lo mejor de cada uno, logrando un software más flexible y preparado para futuras ampliaciones.

